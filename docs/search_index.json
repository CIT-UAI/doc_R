[["index.html", "Documentación de R Prefacio", " Documentación de R Equipo de Investigación (?) 2022-04-22 Prefacio En este libro iremos añadiendo contenido para poder aprender R "],["1-introduccion.html", "Chapter 1 Introduccion", " Chapter 1 Introduccion ##Actualizar paquetes Actualizar un sistema en R, no es facil hacerlo correctamente. Los paquetes en general, “dependen” unos de otros, y de muchas maneras. Aveces un paquete necesita usar la funcion de otro, otra forma es que para el paquete poder ser instalado, necesita ser compilado, es cuando un programa traduce el codigo, a lenguaje maquina, muchos paquetes tambien dependen de otros en esa fase. Pongamos de ejemplo el siguiente el paquete rgdal, este depende del paquete sp. Digamos que instalamos rgdal-version-1, y este instala sp-version-1, todo funcionara perfecto, sin embargo, sin previo aviso, sp lanza una version 2, R al actualizar, volver a instalar la nueva version, sin embargo, rgdal dependia de sp, eso significa que tienen un “vinculo”, internamente se conectan, y no con cualquier sp, con sp-version-1, se instala primero sp al instalar rgdal por que si no esta, no se puede construir rgdal, si cambiamos la version, hay que reconstruir rgdal, pero R no se da cuenta de eso, debido a eso, al actualizar sp, rgdal puede dejar de funcionar. Esto es un problema cuando queremos usar R, y no hay una solucion hermosa o automatica para esto, asi que, se presentan las siguientes alternativas. #Si ningun paquete depende de otro para constuirse, esto funciona update.packages() #Si algun paquete depende de otro para construirse, tiramos los dados para que funcione update.packages(ask=FALSE, checkBuilt=TRUE) Estos dos metodos, son los que no deberiamos usar, los dos siguientes son los mas recomendados, mas recomendado el segundo metodo antes que el primero. #Desinstalar todo, y volver a instalar de 0 packs&lt;-as.data.frame(installed.packages())$Package remove.packages(packs) install.packages(packs) #Metodo ideal para actualizar, desinstalar todo, y solo instalar los paquetes que necesitamos #asi mantenemos el entorno limpio por si instalamos algo que ya no necesitamos packs&lt;-as.data.frame(installed.packages())$Package remove.packages(packs) install.packages(c(“rgdal”, \"sf)) "],["1.1-r-con-sql.html", "1.1 R con SQL", " 1.1 R con SQL Se recomienda leer el primer capitulo introductorio a SQL antes de la siguiente sección. 1.1.1 Conectarse al servidor Anteriormente usábamos st_read para leer archivos, ahora necesitaremos una pieza de código que se llama conexión. Es quien le dirá al paquete sf y a R cómo acceder al servidor para que luego podamos recuperar datos, tambien pueden pensarlo como una forma de indicar la ruta del archivo, solo que como esta en otro PC, necesitaremos credenciales para que nos de los datos. library(sf) library(DBI) library(RPostgres) # Crear coneccion a PostgreSQL con &lt;- dbConnect(RPostgres::Postgres(), host = &#39;localhost&#39;, # IP/Nombre de la pagina donde esta el servidor port = 5432, # Postgres usualmente usa este numero, solo cambiar si el servidor usa otro dbname = &#39;testdb&#39;, # Un servidor puede tener muchas bases de datos, nombre a la cual queremos acceder user = &#39;user&#39;, # Nombre de usuario para la base de datos password = &#39;12345&#39; # Clave para acceder a la base de datos ) Todos estos datos, deben ser dados con anterioridad para que te puedas contactar, es el nuevo equivalente a pasarte un archivo shp. Como notarás, hay usuarios y claves, esto es por que cada usuario puede tener permisos diferentes. Por mas que sea práctico poder acceder a todos los datos, hay que tener especial cuidado con cambiar una base de datos de forma accidental, una forma de evitar esto es usando un usuario que solo puede leer datos. Inevitablemente habrá que aprender un poco de SQL para gestionar la información, pero no te preocupes, que las funciones de SQL tienen casi los mismos nombres que en R. SQL es un lenguaje para consultar y procesar grandes cantidades de información, debido a eso, la palabra que se usa es “Consulta”, donde literalmente consultamos datos, una consulta puede no solo leer, además puede pedir aplicar transformaciones a datos y diferentes funciones al servidor. Las consultas esan el lenguaje de programación SQL, R tiene varias formas de simplificar esto sin tener que usar casi nada el lenguaje, aun así lo necesitaremos un poco. Para leer una tabla se hace de la siguiente manera: x&lt;-st_read(con, query=&quot;SELECT * FROM comunas_chile &quot;) Vamos paso a paso - con: la variable que asignamos arriba, es la “ruta del archivo” en este caso de la conexión a la base de dato s - query: “Consulta” en español, aquí se escribe en lenguaje SQL para obtener datos - SELECT: Seleccionar columnas, * significa todas, si ponemos alguna columna, solo se pedirá esa - FROM: De qué tabla vamos a leer, ¿se nota? no hay esquema, así que lee por defecto el esquema “public”, un equivalente sería usar “public.comunas_chile” Ahora, una vez ejecutada esa línea, la variable x, tendrá los datos de las comunas de Chile. Aprender SQL no es necesario para usar las bases de datos desde R, no mucho más allá después de esto, hay paquetes de R que dan ayuda. Aun así, aprender SQL es una muy buena opción si quieres poder obtener una gran gestión de datos y una buena eficiencia. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
